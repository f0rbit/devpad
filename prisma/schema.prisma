generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  action_history Action[]
  projets        Project[]
  sessions       Session[]
  todo_items     Task[]
  todo_tags      TaskTags[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id              String          @id @default(uuid()) @db.Uuid
  owner_id        String
  title           String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  progress        TASK_PROGRESS   @default(UNSTARTED)
  visibility      TASK_VISIBILITY @default(PRIVATE)
  parent_id       String?         @db.Uuid
  project_goal_id String?         @db.Uuid
  owner           User            @relation(fields: [owner_id], references: [id])
  parent          Task?           @relation("TaskToTask", fields: [parent_id], references: [id])
  project_goal    ProjectGoal?    @relation(fields: [project_goal_id], references: [id])
  children        Task[]          @relation("TaskToTask")
  modules         TaskModule[]
  templates       TemplateTask[]
  tags            TaskTags[]
}

model TaskModule {
  task_id String   @db.Uuid
  type    String
  data    Json     @default("{}") @db.Json
  updated DateTime @updatedAt
  task    Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)

  @@unique([task_id, type])
}

model TemplateTask {
  id           String @id @default(uuid()) @db.Uuid
  title        String
  reference_id String @db.Uuid
  reference    Task   @relation(fields: [reference_id], references: [id])
}

model TaskTags {
  id       String @id @default(uuid()) @db.Uuid
  owner_id String
  title    String
  colour   String @default("#000000")
  owner    User   @relation(fields: [owner_id], references: [id])
  items    Task[]
}

model Project {
  project_id      String
  owner_id        String
  name            String
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  description     String?
  repo_url        String?
  icon_url        String?
  status          PROJECT_STATUS @default(DEVELOPMENT)
  deleted         Boolean        @default(false)
  link_url        String?
  link_text       String?
  current_version String?
  owner           User           @relation(fields: [owner_id], references: [id])
  goals           ProjectGoal[]

  @@unique([owner_id, project_id])
}

model ProjectGoal {
  id             String    @id @default(uuid()) @db.Uuid
  name           String
  project_id     String
  owner_id       String
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  description    String?
  project        Project   @relation(fields: [project_id, owner_id], references: [project_id, owner_id])
  target_time    DateTime  @default(now())
  tasks          Task[]
  deleted        Boolean   @default(false)
  finished_at    DateTime?
  target_version String?
}

model Action {
  id          String      @id @default(uuid()) @db.Uuid
  owner_id    String
  type        ACTION_TYPE
  description String
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  data        Json        @default("{}") @db.Json
  owner       User        @relation(fields: [owner_id], references: [id])
}

enum TASK_PROGRESS {
  UNSTARTED
  IN_PROGRESS
  COMPLETED
}

enum TASK_VISIBILITY {
  PUBLIC
  PRIVATE
  HIDDEN
  ARCHIVED
  DRAFT
  DELETED
}

enum PROJECT_STATUS {
  DEVELOPMENT
  RELEASED
  STOPPED
  LIVE
  FINISHED
  PAUSED
  ABANDONED
}

enum ACTION_TYPE {
  CREATE_TASK
  UPDATE_TASK
  DELETE_TASK
  CREATE_PROJECT
  UPDATE_PROJECT
  DELETE_PROJECT
  CREATE_TAG
  UPDATE_TAG
  DELETE_TAG
  CREATE_MODULE
  UPDATE_MODULE
  DELETE_MODULE
  CREATE_GOAL
  UPDATE_GOAL
  DELETE_GOAL
}
