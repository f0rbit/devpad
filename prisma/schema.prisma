// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projets       Project[]

  todo_tags      TaskTags[] // list of tags created by user
  todo_items     Task[] // list of items owned by user
  action_history Action[] // list of actions performed by user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// todo items
model Task {
  id         String          @id @default(uuid()) @db.Uuid
  owner      User            @relation(fields: [owner_id], references: [id])
  owner_id   String
  title      String
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  progress   TASK_PROGRESS   @default(UNSTARTED)
  visibility TASK_VISIBILITY @default(PRIVATE)

  // relations
  tags       TaskTags[]
  templates  TemplateTask[]
  modules    TaskModule[]
  project    Project?       @relation(fields: [project_id, owner_id], references: [project_id, owner_id])
  project_id String?        @db.Text

  // inheritance
  parent    Task?   @relation("TaskToTask", fields: [parent_id], references: [id])
  parent_id String? @db.Uuid
  children  Task[]  @relation("TaskToTask")
}

model TaskModule {
  id      String   @default(uuid()) @db.Uuid
  task    Task     @relation(fields: [task_id], references: [id])
  task_id String   @db.Uuid
  type    String
  data    Json     @default("{}") @db.Json
  updated DateTime @updatedAt

  @@unique([task_id, type])
}

model TemplateTask {
  id           String @id @default(uuid()) @db.Uuid
  title        String
  reference    Task   @relation(fields: [reference_id], references: [id])
  reference_id String @db.Uuid
}

model TaskTags {
  id       String @id @default(uuid()) @db.Uuid
  owner    User   @relation(fields: [owner_id], references: [id])
  owner_id String
  title    String
  colour   String @default("#000000")

  items Task[]
}

enum TASK_PROGRESS {
  UNSTARTED
  IN_PROGRESS
  COMPLETED
}

// todo enums
enum TASK_VISIBILITY {
  PUBLIC
  PRIVATE
  HIDDEN
  ARCHIVED
  DRAFT
  DELETED
}

model Project {
  project_id  String         @db.Text
  owner       User           @relation(fields: [owner_id], references: [id])
  owner_id    String
  name        String
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  description String?        @db.Text
  repo_url    String? // url to repo
  icon_url    String? // url to icon
  status      PROJECT_STATUS @default(DEVELOPMENT)
  deleted     Boolean        @default(false)
  link_url    String? // url to project
  link_text   String? // text to display for link

  tasks Task[] // list of tasks owned by project

  // unique owner & project_id
  @@unique([owner_id, project_id])
}

enum PROJECT_STATUS {
  DEVELOPMENT
  RELEASED
  STOPPED
  LIVE
  FINISHED
  PAUSED
  ABANDONED
}

enum ACTION_TYPE {
  CREATE_TASK
  UPDATE_TASK
  DELETE_TASK
  CREATE_PROJECT
  UPDATE_PROJECT
  DELETE_PROJECT
  CREATE_TAG
  UPDATE_TAG
  DELETE_TAG
  CREATE_MODULE
  UPDATE_MODULE
  DELETE_MODULE
}

model Action {
  id          String      @id @default(uuid()) @db.Uuid
  owner       User        @relation(fields: [owner_id], references: [id])
  owner_id    String
  type        ACTION_TYPE
  description String      @db.Text 
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  data        Json        @default("{}") @db.Json
}
