---
import { getTask } from "../../../server/tasks";
import PageLayout from "../../../layouts/PageLayout.astro";
import ChevronUp from "lucide-solid/icons/chevron-up";
import ChevronDown from "lucide-solid/icons/chevron-down";
import LinkedCode from "../../../components/LinkedCode.astro";
import Loader from "lucide-solid/icons/loader";
import Check from "lucide-solid/icons/check";
import X from "lucide-solid/icons/x";
import { getActiveUserTags } from "../../../server/tags";
import { TagPicker } from "../../../components/solid/TagPicker";
import { getTaskHistory } from "../../../server/action";
import HistoryTimeline from "../../../components/solid/HistoryTimeline";

const { todo_id } = Astro.params;
if (!todo_id)
  return new Response(null, { status: 404, statusText: "Task not found" });

const user = Astro.locals.user;
if (!user)
  return new Response(null, { status: 401, statusText: "Unauthorized" });

const found = await getTask(todo_id);
if (!found)
  return new Response(null, { status: 404, statusText: "Task not found" });

const { task, codebase_tasks, tags } = found;

if (task.owner_id !== user.id)
  return new Response(null, { status: 401, statusText: "Unauthorized" });

const user_tags = await getActiveUserTags(user.id);

// tags contains the TagLink, we construct a map of tag_id to Tag & pass to TagPicker
const tag_map = new Map(user_tags.map((t) => [t.id, t]));
const current_tags = tags.map((tag_id) => tag_map.get(tag_id)) ?? [];

const from = Astro.url.searchParams.get("from")! || "";

const task_history = await getTaskHistory(todo_id);
---

<PageLayout title={"Editing Task"}>
  <main>
    <h4>task editor</h4>
    <br />
    <div class="editor" data-todo-id={todo_id} data-user-id={user.id}>
      <label for="title">Title</label>
      <input type="text" id="title" name="title" value={task.title.trim()} />
      <label for="summary">Summary</label>
      <input type="text" id="summary" name="summary" value={task.summary} />
      <label for="description">Description</label>
      <textarea id="description" name="description">{task.description}</textarea
      >
      <label for="progress">Progress</label>
      <select id="progress" name="progress" value={task.progress}>
        <option value="UNSTARTED">Not Started</option>
        <option value="IN_PROGRESS">In Progress</option>
        <option value="COMPLETED">Completed</option>
      </select>

      <label for="end_time">End Time</label>
      <input
        type="datetime-local"
        id="end_time"
        name="end_time"
        value={task.end_time}
      />
    </div>
    <details class="boxed">
      <summary class="flex-row" style="font-size: smaller;">
        <ChevronUp class="up-arrow" />
        <ChevronDown class="down-arrow" />
        More Options
      </summary>
      <div class="editor">
        <label for="start_time">Start Time</label>
        <input
          type="datetime-local"
          id="start_time"
          name="start_time"
          value={task.start_time}
        />
        <label for="visibility">Visibility</label>
        <select id="visibility" name="visibility" value={task.visibility}>
          <option value="PUBLIC" selected={task.visibility === "PUBLIC"}
            >Public</option
          >
          <option value="PRIVATE" selected={task.visibility === "PRIVATE"}
            >Private</option
          >
          <option value="HIDDEN" selected={task.visibility === "HIDDEN"}
            >Hidden</option
          >
          <option value="ARCHIVED" selected={task.visibility === "ARCHIVED"}
            >Archived</option
          >
          <option value="DRAFT" selected={task.visibility === "DRAFT"}
            >Draft</option
          >
          <option value="DELETED" selected={task.visibility === "DELETED"}
            >Deleted</option
          >
        </select>
        <label for="priority">Priority</label>
        <select id="priority" name="priority">
          <option value="LOW" selected={task.priority === "LOW"}>Low</option>
          <option value="MEDIUM" selected={task.priority === "MEDIUM"}
            >Medium</option
          >
          <option value="HIGH" selected={task.priority === "HIGH"}>High</option>
        </select>
      </div>
    </details>
    <br />
    <div class="editor">
      <label for="tags">Tags</label>
      <TagPicker
        currentTags={current_tags}
        availableTags={user_tags ?? []}
        owner_id={user.id}
        client:load
      />
    </div>
    <br />
    <a href={from.length > 0 ? from : "/todo"}>back</a>
    <a href="#" id="save-button">save</a>
    <Loader id="spinner" class="icon hidden" />
    <Check id="success-icon" class="icon hidden" />
    <X id="error-icon" class="icon hidden" />
    <br />
    <br />
    <div id="response" class="response"></div>
    {
      codebase_tasks && (
        <>
          <br />
          <h5>linked code</h5>
          <LinkedCode code={codebase_tasks} />
        </>
      )
    }
    {
      task_history?.length > 0 && (
        <>
          <br />
          <h5 style="margin-bottom: 10px">task history</h5>
          <HistoryTimeline actions={task_history} client:load />
        </>
      )
    }
  </main>
</PageLayout>

<script>
  const saveButton = document.getElementById("save-button");
  const spinner = document.getElementById("spinner")!;
  const successIcon = document.getElementById("success-icon")!;
  const errorIcon = document.getElementById("error-icon")!;

  const get_value = (id: string) => {
    const val =
      (document.getElementById(id) as HTMLInputElement | undefined)?.value ??
      null;
    if (val == null || val.length == 0) return undefined;
    return val;
  };

  const toggleIcons = (
    showSpinner: boolean,
    showSuccess: boolean,
    showError: boolean,
  ) => {
    spinner.classList.toggle("hidden", !showSpinner);
    successIcon.classList.toggle("hidden", !showSuccess);
    errorIcon.classList.toggle("hidden", !showError);
  };

  saveButton!.addEventListener("click", async () => {
    toggleIcons(true, false, false);

    const title = get_value("title") ?? "";
    const summary = get_value("summary");
    const description = get_value("description");
    const progress = get_value("progress") ?? "UNSTARTED";
    const visibility = get_value("visibility") ?? "PRIVATE";
    const start_time = get_value("start_time");
    const end_time = get_value("end_time");
    const priority = get_value("priority") ?? "LOW";
    // @ts-ignore
    const tags = get_tags() ?? [];

    const owner_id =
      document.querySelector(".editor")?.getAttribute("data-user-id") ?? null;
    const todo_id =
      document.querySelector(".editor")?.getAttribute("data-todo-id") ?? null;

    const response = await fetch(`/api/todo/upsert`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        id: todo_id,
        title,
        summary,
        description,
        progress,
        visibility,
        start_time,
        end_time,
        priority,
        owner_id,
        tags,
      }),
    });

    if (!response.ok) {
      console.error(await response.text());
      return;
    } else {
      const data = await response.json();
    }

    // fake an 80ms second delay
    await new Promise((resolve) => setTimeout(resolve, 80));

    if (response.ok) {
      toggleIcons(false, true, false);
    } else {
      toggleIcons(false, false, true);
    }

    setTimeout(() => {
      toggleIcons(false, false, false);
    }, 5000);
  });
</script>

<style scoped>
  .editor {
    display: grid;
    gap: 5px;
    grid-template-columns: 1fr 3fr;
    padding: 7px 0px;
  }

  summary {
    justify-content: center;
  }

  .up-arrow {
    display: none;
  }

  .down-arrow {
    display: unset;
  }

  details[open] .up-arrow {
    display: unset;
  }

  details[open] .down-arrow {
    display: none;
  }

  .icon {
    margin-left: 10px;
    vertical-align: middle;
  }

  .hidden {
    display: none;
  }

  #spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  #success-icon {
    color: oklch(from var(--item-green) 0.8 0.15 h);
  }

  #error-icon {
    color: oklch(from var(--item-red) 0.8 0.15 h);
  }
</style>
