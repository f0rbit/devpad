---
import { eq } from "drizzle-orm";
import { db } from "../../../../../database/db";
import { task } from "../../../../../database/schema";
import PageLayout from "../../../../layouts/PageLayout.astro";
import { getProject } from "../../../../server/projects";

const { project_id } = Astro.params;
const user = Astro.locals.user;

const { project, error } = await getProject(user?.id ?? null, project_id);

const project_uuid = project?.id ?? null;

const tasks = project_uuid ? await db.select().from(task).where(eq(task.project_id, project_uuid)) : [];
---

<PageLayout title={"Project Tasks"}>
	<main>
		<h2>tasks</h2>
		<a href={`/project/${project_id}`}>back</a>
		<a href={`/project/${project_id}/tasks`}>tasks</a>
		<a href={`/project/${project_id}/tasks/update`}>update</a>
		<a href={`/project/${project_id}/tasks/config`}>config</a>
		<pre>{JSON.stringify(tasks, null, 2)}</pre>
		<br />
		{
			project?.repo_id && (
				<>
					<a href="#" id="update-check">
						check for updates
					</a>
					<p id="output" />
				</>
			)
		}
	</main>
</PageLayout>

<script is:inline define:vars={{ project_uuid }}>
	function hook_check() {
		const update_check = document.getElementById("update-check");
		if (!update_check) return;
		const output = document.getElementById("output");
		if (!output) throw new Error("Output element not found");
		update_check.addEventListener("click", async () => {
			const response = await fetch(
				`/api/project/scan?project_id=${project_uuid}`,
				{ method: "POST" },
			);
			if (!response.ok) {
				output.innerText = "Error: " + response.statusText;
				return;
			}
			output.innerText = "";
			const reader = response.body.getReader();

			const read_data = async function* () {
				let done = false;
				while (!done) {
					const { done: d, value: v } = await reader.read();
					done = d;
					const value = new TextDecoder().decode(v);
					const lines = value.split("\n");
					for (const line of lines) {
						if (line.length > 1) yield line;
					}
				}
			};

			for await (const line of read_data()) {
				output.innerText = line;
				await new Promise((resolve) => setTimeout(resolve, 100));
			}
		});
	}

	hook_check();
</script>
