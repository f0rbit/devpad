---
import PageLayout from "../../../../layouts/PageLayout.astro";
import ProjectTasksLayout from "../../../../layouts/ProjectTasksLayout.astro";
import { getProject, getRecentUpdate } from "../../../../server/projects.ts";
import { getProjectTasks, type Task } from "../../../../server/tasks";
import { UpdateDiffList } from "../../../../components/solid/UpdateDiff.tsx";

const { project_id } = Astro.params;
if (!project_id)
  return new Response(null, { status: 404, statusText: "Project not found" });
const user = Astro.locals.user;
if (!user)
  return new Response(null, { status: 401, statusText: "Unauthorized" });

const { project: found_project, error } = await getProject(user.id, project_id);
if (error) return new Response(null, { status: 500, statusText: error });
if (!found_project)
  return new Response(null, { status: 404, statusText: "Project not found" });

const project_uuid = found_project.id;

const project_tasks = await getProjectTasks(project_uuid);
// build a map of task.codebases_tasks.id -> task
const codebase_task_map = project_tasks.reduce(
  (acc, task) => {
    if (!task.codebase_tasks) return acc;
    acc[task.codebase_tasks.id] = task;
    return acc;
  },
  {} as Record<string, Task>,
);

// get the most recent todo_update for the project and render it
const update = await getRecentUpdate(found_project);

const update_data = update?.data
  ? typeof update.data == "string"
    ? JSON.parse(update.data)
    : update.data
  : null;
---

<PageLayout title={`Update Codebase - ${project_id}`}>
  <ProjectTasksLayout project_id={project_id}>
    <div class="flex-col" style="gap: 10px">
      <a role="button" id="update-check"> check for updates </a>
      <p id="output"></p>
      <div></div>
      {
        update ? (
          <UpdateDiffList
            items={update_data ?? []}
            tasks={codebase_task_map}
            project_id={project_uuid}
            update_id={update.id}
            client:load
          />
        ) : (
          <p>No updates</p>
        )
      }
    </div>
  </ProjectTasksLayout>
</PageLayout>

<script is:inline define:vars={{ project_uuid }}>
  function hook_check() {
    const update_check = document.getElementById("update-check");
    if (!update_check) return;
    const output = document.getElementById("output");
    if (!output) throw new Error("Output element not found");
    update_check.addEventListener("click", async () => {
      const response = await fetch(
        `/api/project/scan?project_id=${project_uuid}`,
        { method: "POST" },
      );
      if (!response.ok) {
        output.innerText = "Error: " + response.statusText;
        return;
      }
      output.innerText = "";
      const reader = response.body.getReader();

      const read_data = async function* () {
        let done = false;
        while (!done) {
          const { done: d, value: v } = await reader.read();
          done = d;
          const value = new TextDecoder().decode(v);
          const lines = value.split("\n");
          for (const line of lines) {
            if (line.length > 1) yield line;
          }
        }

        if ((output.innerText = "done")) {
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        }
      };

      for await (const line of read_data()) {
        output.innerText = line;
        await new Promise((resolve) => setTimeout(resolve, 100));
      }
    });
  }

  hook_check();
</script>
