---
import Layout from "../../layouts/Layout.astro";
const user = Astro.locals.user;
---

<script>
	async function create_project() {
		document.getElementById("error")!.innerText = "";
		const get_value = (id: string) => {
			return (
				(document.getElementById(id) as HTMLInputElement | undefined)?.value ??
				null
			);
		};
		// extract elements from form
		const project_id = get_value("project_id") ?? null;
		const status = get_value("status") ?? "development";
		const name = get_value("name") ?? project_id;
		const icon_url = get_value("icon_url") ?? null;
		const description = get_value("description") ?? null;
		const link_text = get_value("link_text") ?? null;
		const link_url = get_value("link_url") ?? null;
		const github_url = get_value("github_url") ?? null;
		const visibility = get_value("visibility") ?? "private";

		const owner_id = document.querySelector("main")?.dataset?.user ?? null;

		// submit POST request
		const body = JSON.stringify({
			project_id,
			status: status.toUpperCase(),
			name,
			icon_url,
			description,
			link_text,
			link_url,
			github_url,
			visibility: visiblity.toUpperCase(),
			owner_id,
		});
		const method = "PATCH";
		const url = "/api/project/upsert";
		const response = await fetch(url, { method, body });

		// if error, display error
		if (!response || !response.ok) {
			document.getElementById("error")!.innerText = "Error submitting request";
			return;
		}

		// otherwise goto new project
		try {
			// TODO: zod validation on client side
			const result = (await response.json()) as any;
			window.location.href = `/project/${result.project_id}`;
		} catch (err) {
			document.getElementById("error")!.innerText = "Error parsing result";
			console.error(err);
			return;
		}
	}

	document.getElementById("create")?.addEventListener("click", create_project);
</script>

<Layout title="Create Project">
	<main data-user={user?.id ?? null}>
		<h1>create project</h1>
		<div>
			<label for="project_id">project id</label>
			<input type="text" id="project_id" required />
			<label for="status">status</label>
			<select id="status">
				<option>development</option>
				<option>released</option>
				<option>stopped</option>
				<option>live</option>
				<option>finished</option>
				<option>paused</option>
				<option>abandoned</option>
			</select>
		</div>
		<div>
			<label for="name">name</label>
			<input type="text" id="name" />
			<label for="icon_url">icon url</label>
			<input type="text" id="icon-url" />
		</div>
		<div>
			<label for="description">description</label>
			<input type="text" id="description" />
		</div>
		<div>
			<label for="link_text">link text</label>
			<input type="text" id="link_text" />
			<label for="link_url">link url</label>
			<input type="text" id="link_url" />
		</div>
		<div>
			<label for="github_url">github url</label>
			<input type="text" id="github_url" />
			<label for="visibility">visibility</label>
			<select id="visibility">
				<option>public</option>
				<option>private</option>
				<option>hidden</option>
				<option>archived</option>
				<option>draft</option>
				<option>deleted</option>
			</select>
		</div>
		<div>
			<a href="/project">back</a>
			<a href="#" id="create">create</a>
		</div>
		<div>
			<p id="error"></p>
		</div>
	</main>
</Layout>

<style>
	main div {
		display: flex;
		width: 100%;
		flex-direction: row;
		gap: 5px;
	}
	main {
		display: flex;
		flex-direction: column;
		gap: 4px;
	}

	main label {
		width: max-content;
		white-space: nowrap;
	}

	main > div > label:first-child {
		min-width: 5rem;
	}
	main input[type="text"] {
		width: 100%;
	}
</style>
