---
import { getServerApiClient } from "@/utils/api-client";
import PageLayout from '@/layouts/PageLayout.astro';
import TaskEditor from '@/components/solid/TaskEditor';

const { todo_id } = Astro.params;
if (!todo_id) return new Response(null, { status: 404, statusText: "Task not found" });

const user = Astro.locals.user;
if (!user) return new Response(null, { status: 401, statusText: "Unauthorized" });

let found = null;
let user_tags = [];
let project_map = {};
let task_history = [];

try {
	const apiClient = getServerApiClient(Astro.locals);
	
	// Get task by ID using the API client
	found = await apiClient.tasks.find(todo_id);

	if (!found || !found.task) return new Response(null, { status: 404, statusText: "Task not found" });
	if (found.task.owner_id !== user.id) return new Response(null, { status: 401, statusText: "Unauthorized" });

	// Get projects and convert to map format  
	const projects = await apiClient.projects.list();
	project_map = projects.reduce((acc, project) => {
		acc[project.project_id] = project;
		return acc;
	}, {} as Record<string, any>);

	// Get tags and task history using API client
	[user_tags, task_history] = await Promise.all([
		apiClient.tags.list(),
		apiClient.tasks.history.get(todo_id)
	]);
} catch (error) {
	console.error("Error fetching task data:", error);
	return new Response(null, { status: 500, statusText: "Internal Server Error" });
}

const { tags } = found;

// tags contains the TagLink, we construct a map of tag_id to Tag & pass to TagPicker
const tag_map = new Map(user_tags.map(t => [t.id, t]));
const current_tags = tags.map(tag_id => tag_map.get(tag_id)!) ?? [];
---

<PageLayout title={`${found.task?.title ?? "New Task"} - devpad`}>
	<main>
		<TaskEditor task={found} user_tags={user_tags} current_tags={current_tags.filter(Boolean)} history={task_history} user_id={user.id} project_map={project_map} client:load />
	</main>
</PageLayout>
