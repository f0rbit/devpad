---
// This is a demo page showing how the API client works
import { getApiClient, setApiKey } from "@/utils/api-client";

// For demo purposes, you would normally get this from user session/login
const demoApiKey = "your-api-key-here";

// Example of how components would use the API client
const title = "API Client Demo";
---

<html>
<head>
    <title>{title}</title>
    <meta name="devpad-api-key" content={demoApiKey}>
</head>
<body>
    <h1>Devpad API Client Demo</h1>
    
    <div id="demo-content">
        <p>This page demonstrates how the global API client works.</p>
        
        <h2>API Client Features:</h2>
        <ul>
            <li>✅ Global singleton instance</li>
            <li>✅ Environment variable configuration</li>
            <li>✅ Multiple API key storage methods (localStorage, sessionStorage, meta tags, cookies)</li>
            <li>✅ Automatic error handling</li>
            <li>✅ TypeScript support with @devpad/schema types</li>
        </ul>
        
        <h2>Replaced Fetch Calls:</h2>
        <ul>
            <li>✅ <code>TagEditor.tsx</code> - save() function now uses <code>apiClient.tasks.saveTags()</code></li>
            <li>✅ <code>TaskCard.tsx</code> - progress() function now uses <code>apiClient.tasks.upsert()</code></li>
            <li>✅ <code>TaskEditor.tsx</code> - saveTask() function now uses <code>apiClient.tasks.upsert()</code></li>
            <li>✅ <code>ConfigEditor.tsx</code> - save() function now uses <code>apiClient.projects.saveConfig()</code></li>
            <li>✅ <code>SpecificationEditor.tsx</code> - fetch/save functions now use API client</li>
        </ul>
        
        <h2>Usage Examples:</h2>
        <pre><code>{`// In a Solid component
import { getApiClient } from "../../utils/api-client";

// Save tags
const apiClient = getApiClient();
const result = await apiClient.tasks.saveTags(values);

// Update task progress
await apiClient.tasks.upsert({
  id: task.id,
  progress: new_progress,
  owner_id: task.owner_id,
});

// Save project configuration
await apiClient.projects.saveConfig({
  config: { tags: [], ignore: [] },
  scan_branch: "main",
  id: project_id,
});`}</code></pre>

        <button id="test-api" type="button">Test API Client</button>
        <div id="result"></div>
    </div>

    <script>
        document.getElementById('test-api')?.addEventListener('click', async () => {
            const resultDiv = document.getElementById('result');
            try {
                // This is just to demonstrate the client setup
                // In a real app, you'd have a valid API key from user session
                const { getApiClient, hasApiKey } = await import('@/utils/api-client');
                
                if (!hasApiKey()) {
                    resultDiv.innerHTML = '<p style="color: orange;">⚠️ No API key found. In a real app, this would be provided after login.</p>";
                } else {
                    resultDiv.innerHTML = '<p style="color: green;">✅ API client is configured and ready!</p>";
                    
                    // You could test actual API calls here if you had a valid key
                    // const client = getApiClient();
                    // const projects = await client.projects.list();
                }
            } catch (error) {
                resultDiv.innerHTML = `<p style="color: red;">❌ Error: ${error.message}</p>`;
            }
        });
    </script>
</body>
</html>