---
import { getServerApiClient } from "@/utils/api-client";
import type { Project } from "@devpad/schema";
import PageLayout from '@/layouts/PageLayout.astro';
import ProjectTasksLayout from '@/layouts/ProjectTasksLayout.astro';
import { TaskSorter } from '@/components/solid/TaskSorter';

const { project_id } = Astro.params;
if (!project_id) return new Response(null, { status: 404, statusText: "Project not found" });
const user = Astro.locals.user;
if (!user) return new Response(null, { status: 401, statusText: "Unauthorized" });

const apiClient = getServerApiClient(Astro.locals);

let project;
let error: string | null = null;
try {
	project = await apiClient.getByName(project_id);
	if (!project) {
		error = "Project not found";
	} else if (project.owner_id !== user.id) {
		error = "Access denied";
	}
} catch (err) {
	console.error("Failed to fetch project:", err);
	error = "Failed to fetch project";
}
if (error) return new Response(null, { status: 500, statusText: error });
if (!project) return new Response(null, { status: 404, statusText: "Project not found" });

const project_map = {} as Record<string, Project>;
project_map[project.id] = project;

let tasks = [];
let tags = [];
try {
	tasks = await apiClient.tasks.getByProject(project.id);
	tags = await apiClient.tags.list();
} catch (err) {
	console.error("Failed to fetch tasks or tags:", err);
}
---

<PageLayout title={`Tasks - ${project_id}`}>
	<ProjectTasksLayout project_id={project_id}>
		<TaskSorter tasks={tasks} project_map={project_map} defaultOption={"recent"} tags={tags} user_id={user.id} defaultView={user.task_view} client:load />
	</ProjectTasksLayout>
</PageLayout>
