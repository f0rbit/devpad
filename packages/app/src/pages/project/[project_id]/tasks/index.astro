---
import { getServerApiClient, rethrow } from "@/utils/api-client";
import type { Project, TaskWithDetails } from "@devpad/schema";
import PageLayout from '@/layouts/PageLayout.astro';
import ProjectTasksLayout from '@/layouts/ProjectTasksLayout.astro';
import { TaskSorter } from '@/components/solid/TaskSorter';

const { project_id } = Astro.params;
if (!project_id) return new Response(null, { status: 404, statusText: "Project not found" });
const user = Astro.locals.user;
if (!user) return new Response(null, { status: 401, statusText: "Unauthorized" });

const apiClient = getServerApiClient(Astro.locals);

const { project, error: projectError } = await apiClient.projects.getByName(project_id);
if (projectError) return rethrow(projectError);
if (!project) return new Response(null, { status: 404, statusText: "Project not found" });
if (project.owner_id !== user.id) return new Response(null, { status: 401, statusText: "Access denied" });

const project_map = {} as Record<string, Project>;
project_map[project.id] = project;

const { tasks, error: tasksError } = await apiClient.tasks.getByProject(project.id);
if (tasksError) return rethrow(tasksError);

const { tags, error: tags_error } = await apiClient.tags.list();
if (tags_error) return rethrow(tags_error);
---

<PageLayout title={`Tasks - ${project_id}`}>
	<ProjectTasksLayout project_id={project_id}>
		<TaskSorter tasks={tasks} project_map={project_map} defaultOption={"recent"} tags={tags} user_id={user.id} defaultView={user.task_view} client:load />
	</ProjectTasksLayout>
</PageLayout>
