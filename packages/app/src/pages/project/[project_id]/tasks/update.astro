---
import { getServerApiClient, rethrow } from "@/utils/api-client";
import type { Task, TaskWithDetails } from "@devpad/schema";
import PageLayout from '@/layouts/PageLayout.astro';
import ProjectTasksLayout from '@/layouts/ProjectTasksLayout.astro';
import { UpdateDiffList } from '@/components/solid/UpdateDiff';

const { project_id } = Astro.params;
if (!project_id) return new Response(null, { status: 404, statusText: "Project not found" });
const user = Astro.locals.user;
if (!user) return new Response(null, { status: 401, statusText: "Unauthorized" });

const apiClient = getServerApiClient(Astro.locals);

const { project, error: projectError } = await apiClient.projects.getByName(project_id);
if (projectError) return rethrow(projectError);
if (!project) return new Response(null, { status: 404, statusText: "Project not found" });
if (project.owner_id !== user.id) return new Response(null, { status: 403, statusText: "Access denied" });

const { tasks: project_tasks, error: tasksError } = await apiClient.tasks.getByProject(project.id);
if (tasksError) return rethrow(tasksError);
	
// Build a map of task.codebases_tasks.id -> task
const codebase_task_map = project_tasks.reduce(
	(acc, task) => {
		if (!task.codebase_tasks) return acc;
		acc[task.codebase_tasks.id] = task;
		return acc;
	},
	{} as Record<string, TaskWithDetails>
);

// Get pending scan updates for this project
const { updates: pending_updates, error: updatesError } = await apiClient.projects.scan.updates(project.id);
if (updatesError) {
	console.error("Error fetching updates:", updatesError);
}

// Get the most recent pending update
const update = pending_updates && pending_updates.length > 0 ? pending_updates[0] : null;

const update_data = update?.data ? (typeof update.data === "string" ? JSON.parse(update.data) : update.data) : null;
---

<PageLayout title={`Update Codebase - ${project_id}`}>
	<ProjectTasksLayout project_id={project_id}>
		<div class="flex-col" style="gap: 10px">
		<a role="button" id="update-check" data-project-id={project.id}> check for updates </a>
		<p id="output"></p>
		<div></div>
		{update ? <UpdateDiffList items={update_data ?? []} tasks={codebase_task_map} project_id={project.id} update_id={update.id} client:load /> : <p>No updates</p>}
		</div>
	</ProjectTasksLayout>
</PageLayout>

<script>
	import { getApiClient } from "@/utils/api-client";
	
	function hook_check() {
		const update_check = document.getElementById("update-check")!;
		const project_id = update_check.dataset['project-id'] as string;
		if (!update_check) return;
		const output = document.getElementById("output");
		if (!output) throw new Error("Output element not found");
		update_check.addEventListener("click", async () => {
			const apiClient = getApiClient();
			try {
				const stream = await apiClient.projects.scan.initiate(project_id);
				output.innerText = "";
				
				const reader = stream.getReader();
				
				const read_data = async function* () {
					let done = false;
					while (!done) {
						const { done: d, value } = await reader.read();
						done = d;
						if (value) {
							yield value;
						}
					}
				};
				
				for await (const chunk of read_data()) {
					const lines = chunk.split("\n");
					for (const line of lines) {
						if (line.trim().length > 0) {
							output.innerText += line + "\n";
							await new Promise((resolve) => setTimeout(resolve, 10));
						}
					}
				}
				
				output.innerText += "Scan completed! Reloading page...";
				setTimeout(() => {
					window.location.reload();
				}, 1000);
			} catch (error) {
				console.error("Scan error:", error);
				output.innerText = "Error: " + (error instanceof Error ? error.message : "Unknown error");
			}
		});
	}

	hook_check();
</script>
