---
import { getServerApiClient, rethrow } from "@/utils/api-client";
import PageLayout from "@/layouts/PageLayout.astro";
import ProjectLayout from "@/layouts/ProjectLayout.astro";
import { Project, Milestone, Goal } from "@devpad/schema";

const { project_id, milestone_id, goal_id } = Astro.params;
if (!project_id || !milestone_id || !goal_id) return new Response(null, { status: 404, statusText: "Not found" });

const user = Astro.locals.user;
if (!user) return new Response(null, { status: 401, statusText: "Unauthorized" });

const apiClient = getServerApiClient(Astro.locals);

const { project, error: projectError } = await apiClient.projects.getByName(project_id);
if (projectError) return rethrow(projectError);
if (!project) return new Response(null, { status: 404, statusText: "Project not found" });
if (project.owner_id !== user.id) return new Response(null, { status: 401, statusText: "Access denied" });

const { milestone, error: milestoneError } = await apiClient.milestones.find(milestone_id);
if (milestoneError) return rethrow(milestoneError);
if (!milestone) return new Response(null, { status: 404, statusText: "Milestone not found" });

const { goal, error: goalError } = await apiClient.goals.find(goal_id);
if (goalError) return rethrow(goalError);
if (!goal) return new Response(null, { status: 404, statusText: "Goal not found" });
---

<PageLayout title={`Edit Goal - ${project_id}`}>
	<ProjectLayout project_id={project_id}>
		<h5>edit goal for {milestone.name}</h5>
		<section id="goal-form" data-goal-id={goal.id}>
			<div class="flex-row">
				<label for="name">name</label>
				<input id="name" type="text" value={goal.name} placeholder="Goal name" required />
			</div>

			<div class="flex-row">
				<label for="description">description</label>
				<textarea id="description" placeholder="Optional description" rows={3}>{goal.description || ""}</textarea>
			</div>

			<div class="flex-row">
				<label for="target-time">target date</label>
				<input id="target-time" type="datetime-local" value={goal.target_time || ""} />
			</div>

			<div class="flex-row">
				<a role="button" id="submit-goal">Update Goal</a>
				<a role="button" id="cancel-goal">Cancel</a>
				<a role="button" id="delete-goal" style="color: red;">Delete</a>
			</div>

			<div>
				<p id="error" style="color: red;"></p>
			</div>
		</section>
	</ProjectLayout>
</PageLayout>

<script>
	import { getApiClient } from "@/utils/api-client";

	async function updateGoal() {
		const errorEl = document.getElementById("error") as HTMLParagraphElement;
		errorEl.innerText = "";

		const getValue = (id: string) => {
			return (document.getElementById(id) as HTMLInputElement | HTMLTextAreaElement)?.value?.trim() || null;
		};

		const name = getValue("name");
		const description = getValue("description");
		const target_time = getValue("target-time");
		
		if (!name) {
			errorEl.innerText = "Goal name is required";
			return;
		}

		const goalId = document.getElementById("goal-form")?.dataset.goalId;
		if (!goalId) {
			errorEl.innerText = "Goal ID not found";
			return;
		}

		try {
			const apiClient = getApiClient();
			await apiClient.goals.update(goalId, {
				name,
				description,
				target_time,
			});

			// Navigate back to goals page
			const projectSlug = window.location.pathname.split('/')[2];
			window.location.href = `/project/${projectSlug}/goals`;
		} catch (error) {
			console.error("Failed to update goal:", error);
			errorEl.innerText = "Failed to update goal";
		}
	}

	async function deleteGoal() {
		if (!confirm("Are you sure you want to delete this goal?")) {
			return;
		}

		const errorEl = document.getElementById("error") as HTMLParagraphElement;
		errorEl.innerText = "";

		const goalId = document.getElementById("goal-form")?.dataset.goalId;
		if (!goalId) {
			errorEl.innerText = "Goal ID not found";
			return;
		}

		try {
			const apiClient = getApiClient();
			await apiClient.goals.delete(goalId);

			// Navigate back to goals page
			const projectSlug = window.location.pathname.split('/')[2];
			window.location.href = `/project/${projectSlug}/goals`;
		} catch (error) {
			console.error("Failed to delete goal:", error);
			errorEl.innerText = "Failed to delete goal";
		}
	}

	function cancelGoal() {
		const projectSlug = window.location.pathname.split('/')[2];
		window.location.href = `/project/${projectSlug}/goals`;
	}

	document.getElementById("submit-goal")?.addEventListener("click", updateGoal);
	document.getElementById("cancel-goal")?.addEventListener("click", cancelGoal);
	document.getElementById("delete-goal")?.addEventListener("click", deleteGoal);
</script>