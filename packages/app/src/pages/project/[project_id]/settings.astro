---
import { getServerApiClient } from "@/utils/api-client";
import PageLayout from '../../../layouts/PageLayout.astro';
import ProjectLayout from '../../../layouts/ProjectLayout.astro';
import ProjectSettings from '../../../components/ProjectSettings.astro';
import ConfigEditor from '../../../components/solid/ConfigEditor';
import { TagWithTypedColor } from "@devpad/schema";

const { project_id } = Astro.params;
if (!project_id) return new Response(null, { status: 404, statusText: "Project not found" });

const user = Astro.locals.user;
if (!user) return new Response(null, { status: 401, statusText: "Unauthorized" });

const apiClient = getServerApiClient(Astro.locals);

let project;
let error: string | null = null;
try {
	project = await apiClient.projects.getByName(project_id);
	if (!project) {
		error = "Project not found";
	} else if (project.owner_id !== user.id) {
		error = "Access denied";
	}
} catch (err) {
	console.error("Failed to fetch project:", err);
	error = "Failed to fetch project";
}
if (error) return new Response(null, { status: 500, statusText: error });
if (!project) return new Response(null, { status: 404, statusText: "Project not found" });

let config;
let config_error: string | null = null;
try {
	config = await apiClient.projects.config.load(project.id);
} catch (err) {
	console.error("Failed to load project config:", err);
	config_error = "Failed to load project config";
}
if (config_error) return new Response(null, { status: 500, statusText: config_error });

const [owner, repo] = project.repo_url ? project.repo_url.split("/").slice(-2) : [null, null];

let branches: any[] | null = null;
if (owner && repo) {
	try {
		branches = await apiClient.github.branches(owner, repo);
	} catch (error) {
		console.error("Failed to fetch branches:", error);
		// Continue with null branches - this is not a critical failure
	}
}

let available_tags: TagWithTypedColor[] = [];
try {
	available_tags = await apiClient.tags.list() as TagWithTypedColor[];
} catch (err) {
	console.error("Failed to load tags:", err);
	// Continue with empty tags array
}
---

<PageLayout title={`Settings - ${project_id}`}>
	<ProjectLayout project_id={project_id}>
		<div class="flex-col" style="gap: 5px">
			<h5>project settings</h5>
			<ProjectSettings project={project} />
			<br />
			<h5>scanning settings</h5>
			<ConfigEditor id={project.id} config={config!} branches={branches} scan_branch={project.scan_branch} user_tags={available_tags} client:load />
		</div>
	</ProjectLayout>
</PageLayout>
