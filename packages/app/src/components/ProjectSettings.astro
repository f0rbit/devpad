---
import type { Project } from "@devpad/schema";

interface Props {
	project: Project | null;
}

const _user = Astro.locals.user;
const { project } = Astro.props;
const _mode = project ? "edit" : "create";
---

<section id="project-settings" data-user={_user?.id ?? null} data-pid={project?.id ?? null}>
	<div>
		<label for="project_id">project id</label>
		<input type="text" id="project_id" value={project?.project_id ?? ""} required />
		<label for="status">status</label>
		<select id="status" value={project?.status ?? "DEVELOPMENT"}>
			<option selected={project?.status == "DEVELOPMENT"}>development</option>
			<option selected={project?.status == "RELEASED"}>released</option>
			<option selected={project?.status == "STOPPED"}>stopped</option>
			<option selected={project?.status == "LIVE"}>live</option>
			<option selected={project?.status == "FINISHED"}>finished</option>
			<option selected={project?.status == "PAUSED"}>paused</option>
			<option selected={project?.status == "ABANDONED"}>abandoned</option>
		</select>
	</div>
	<div>
		<label for="name">name</label>
		<input type="text" id="name" value={project?.name ?? ""} />
		<label for="icon_url">icon url</label>
		<input type="text" id="icon-url" value={project?.icon_url ?? ""} />
	</div>
	<div>
		<label for="description">description</label>
		<input type="text" id="description" value={project?.description ?? ""} />
	</div>
	<div>
		<label for="link_text">link text</label>
		<input type="text" id="link_text" value={project?.link_text ?? ""} />
		<label for="link_url">link url</label>
		<input type="text" id="link_url" value={project?.link_url ?? ""} />
	</div>
	<div>
		<label for="github_url">github url</label>
		<input type="text" id="github_url" value={project?.repo_url ?? ""} />
		<input type="number" id="github_repo_id" value={project?.repo_id ?? ""} style="display: none;" />
		<label for="visibility">visibility</label>
		<select id="visibility" value={project?.visibility ?? "PRIVATE"}>
			<option selected={project?.visibility == "PUBLIC"}>public</option>
			<option selected={project?.visibility == "PRIVATE"}>private</option>
			<option selected={project?.visibility == "HIDDEN"}>hidden</option>
			<option selected={project?.visibility == "ARCHIVED"}>archived</option>
			<option selected={project?.visibility == "DRAFT"}>draft</option>
			<option selected={project?.visibility == "DELETED"}>deleted</option>
		</select>
	</div>
	<div>
		<a role="button" id="submit">{_mode == "create" ? "create" : "save"}</a>
		{_mode == "edit" && project?.repo_url && (
			<a role="button" id="scan-repo">scan repository</a>
		)}
	</div>
	<div>
		<p id="error"></p>
	</div>
</section>

<script>
	import { getApiClient } from "@/utils/api-client";
	import type { UpsertProject } from "@devpad/schema";
	
	async function create_project() {
		document.getElementById("error")!.innerText = "";
		const get_value = (id: string) => {
			return (document.getElementById(id) as HTMLInputElement | undefined)?.value ?? null;
		};
		// extract elements from form
		const project_id = get_value("project_id")!;
		const status = get_value("status") ?? "development";
		const name = get_value("name") ?? project_id;
		const icon_url = get_value("icon_url") ?? null;
		const description = get_value("description") ?? null;
		const link_text = get_value("link_text") ?? null;
		const link_url = get_value("link_url") ?? null;
		const github_url = get_value("github_url") ?? null;
		const github_repo_id = get_value("github_repo_id") ?? null;
		const visibility = get_value("visibility") ?? "private";

		const owner_id = document.getElementById("project-settings")?.dataset.user!;
		const pid = document.getElementById("project-settings")?.dataset?.pid ?? null;

		// submit POST request
		const body: UpsertProject = {
			id: pid!,
			project_id,
			status: status.toUpperCase() as UpsertProject["status"],
			name,
			icon_url,
			description,
			link_text,
			link_url,
			repo_url: github_url,
			repo_id: github_repo_id ? Number(github_repo_id) : null,
			visibility: visibility.toUpperCase() as UpsertProject["visibility"],
			owner_id,
			deleted: false,
			specification: null,
			current_version: null,
		};

		try {
			const apiClient = getApiClient();
			await apiClient.projects.upsert(body);
			// go to project page
			window.location.href = `/project/${project_id}`;
		} catch (error) {
			document.getElementById("error")!.innerText = "Error submitting request";
			console.error(error);
			return;
		}
	}

	document.getElementById("submit")?.addEventListener("click", create_project);
	
	// Add scan repository functionality
	async function scanRepository() {
		const scanButton = document.getElementById("scan-repo");
		const errorElement = document.getElementById("error");
		
		if (!scanButton || !errorElement) return;
		
		const projectId = document.getElementById("project-settings")?.dataset?.pid;
		if (!projectId) {
			errorElement.innerText = "No project ID found";
			return;
		}
		
		scanButton.textContent = "scanning...";
		scanButton.setAttribute("disabled", "true");
		errorElement.innerText = "";
		
		try {
			const apiClient = getApiClient();
			const stream = await apiClient.projects.scan.initiate(projectId);
			const reader = stream.getReader();
			
			while (true) {
				const { done, value } = await reader.read();
				if (done) break;
				
				// You could show progress here if needed
				console.log("Scan progress:", value);
			}
			
			errorElement.innerText = "Scan completed! Check updates page for results.";
			scanButton.textContent = "scan repository";
			scanButton.removeAttribute("disabled");
			
		} catch (error) {
			console.error("Scan error:", error);
			errorElement.innerText = "Error scanning repository: " + (error instanceof Error ? error.message : "Unknown error");
			scanButton.textContent = "scan repository";
			scanButton.removeAttribute("disabled");
		}
	}
	
	document.getElementById("scan-repo")?.addEventListener("click", scanRepository);
</script>

<style scoped>
	label {
		font-size: smaller;
	}
	section div {
		display: flex;
		width: 100%;
		flex-direction: row;
		gap: 5px;
		align-items: center;
	}
	section {
		display: flex;
		flex-direction: column;
		gap: 4px;
	}

	section label {
		width: max-content;
		white-space: nowrap;
	}

	section > div > label:first-child {
		min-width: 5rem;
	}
	section input[type="text"] {
		width: 100%;
	}
</style>
