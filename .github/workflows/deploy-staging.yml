name: Deploy Staging

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Custom version (leave empty for auto)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: staging-deployment
  cancel-in-progress: false

jobs:
  calculate-version:
    uses: ./.github/workflows/version-manager.yml
    with:
      custom-version: ${{ github.event.inputs.version }}
    secrets: inherit

  build-and-push:
    runs-on: ubuntu-latest
    needs: calculate-version
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.image-tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}
          cache-from: |
            type=gha,scope=staging
            type=gha,scope=pr-*
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          cache-to: type=gha,mode=max,scope=staging
          build-args: |
            VERSION=${{ needs.calculate-version.outputs.version }}
            
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-push]
    environment:
      name: staging
      url: https://staging.devpad.tools
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Navigate to deployment directory
            cd /var/deploy/devpad-staging
            
            # Set VERSION environment variable
            export VERSION=${{ needs.calculate-version.outputs.version }}
            
            # Pull latest image
            docker-compose -f docker-compose.staging.yml pull
            
            # Stop and remove old container
            docker-compose -f docker-compose.staging.yml down
            
            # Start new container
            docker-compose -f docker-compose.staging.yml up -d
            
            # Wait for health check
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
                if docker-compose -f docker-compose.staging.yml exec -T devpad-staging curl -f http://localhost:17365/health 2>/dev/null; then
                    echo "✅ Health check passed!"
                    break
                elif [ $i -eq 30 ]; then
                    echo "❌ Health check failed after 30 attempts"
                    docker-compose -f docker-compose.staging.yml logs --tail 50
                    exit 1
                else
                    echo "Attempt $i/30: Waiting for service to be ready..."
                    sleep 2
                fi
            done
            
            echo "✅ Staging deployment successful!"
            
      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 15
          
          # Test health endpoint
          curl -f https://staging.devpad.tools/health || exit 1
          
          # Test API endpoint
          curl -f https://staging.devpad.tools/api/v0 || exit 1
          
          echo "✅ Smoke tests passed!"
          
      - name: Create deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.calculate-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://staging.devpad.tools" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit Info" >> $GITHUB_STEP_SUMMARY
          echo "**SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY