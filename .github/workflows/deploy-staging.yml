name: Deploy Staging

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Custom version (leave empty for auto)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: staging-deployment
  cancel-in-progress: false

jobs:
  calculate-version:
    uses: ./.github/workflows/version-manager.yml
    with:
      custom-version: ${{ github.event.inputs.version }}
    secrets: inherit

  build-and-push:
    runs-on: ubuntu-latest
    needs: calculate-version
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-previous
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.image-tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}
          cache-from: |
            type=gha,scope=staging
            type=gha,scope=pr-*
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
          cache-to: type=gha,mode=max,scope=staging
          build-args: |
            VERSION=${{ needs.calculate-version.outputs.version }}
            PUBLIC_API_SERVER_URL=https://staging.devpad.tools/api/v0
            
  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-push]
    environment:
      name: staging
      url: https://staging.devpad.tools
    outputs:
      deployment-success: ${{ steps.deploy.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Save current version for rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/deploy/devpad-staging
            # Save current version for potential rollback
            if [ -f VERSION ]; then
              cp VERSION VERSION.previous
              echo "Saved previous version: $(cat VERSION.previous)"
            fi
            
      - name: Deploy to staging VPS
        id: deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Navigate to deployment directory
            cd /var/deploy/devpad-staging
            
            # Save new version
            echo "${{ needs.calculate-version.outputs.version }}" > VERSION
            export VERSION=${{ needs.calculate-version.outputs.version }}
            
            # Tag current running image as previous before updating
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-previous || true
            
            # Pull latest image
            docker-compose -f docker-compose.staging.yml pull
            
            # Stop and remove old container
            docker-compose -f docker-compose.staging.yml down
            
            # Start new container with TEST_MODE enabled for E2E testing
            TEST_MODE=enabled docker-compose -f docker-compose.staging.yml up -d
            
            # Wait for health check
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
                if docker-compose -f docker-compose.staging.yml exec -T devpad-staging curl -f http://localhost:17365/health 2>/dev/null; then
                    echo "✅ Health check passed!"
                    break
                elif [ $i -eq 30 ]; then
                    echo "❌ Health check failed after 30 attempts"
                    docker-compose -f docker-compose.staging.yml logs --tail 50
                    exit 1
                else
                    echo "Attempt $i/30: Waiting for service to be ready..."
                    sleep 2
                fi
            done
            
            echo "✅ Staging deployment successful!"
            
      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 15
          
          # Test health endpoint
          curl -f https://staging.devpad.tools/health || exit 1
          
          # Test API endpoint
          curl -f https://staging.devpad.tools/api/v0 || exit 1
          
          echo "✅ Smoke tests passed!"

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [deploy-to-staging]
    if: needs.deploy-to-staging.outputs.deployment-success == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(bunx playwright --version | awk '{print $2}')" >> $GITHUB_OUTPUT
        
      - name: Cache Playwright browsers and dependencies marker
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
            ~/playwright-deps-installed
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-deps-v1
          restore-keys: |
            playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-
            playwright-${{ runner.os }}-
        
      - name: Install Playwright browsers and dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          bunx playwright install chromium --with-deps
          touch ~/playwright-deps-installed
        
      - name: Run E2E tests against staging
        id: e2e
        run: |
          TEST_ENV=staging bun run e2e
        env:
          CI: true
          NODE_ENV: test
          STAGING_URL: https://staging.devpad.tools
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-staging
          path: .playwright/
          retention-days: 7
          
      - name: Check test results and trigger rollback if needed
        if: failure()
        run: |
          echo "❌ E2E tests failed! Triggering rollback..."
          echo "TRIGGER_ROLLBACK=true" >> $GITHUB_ENV
          
  rollback-if-needed:
    runs-on: ubuntu-latest
    needs: [e2e-tests, calculate-version]
    if: failure()
    environment:
      name: staging
    steps:
      - name: Rollback staging deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "🔄 Starting rollback process..."
            cd /var/deploy/devpad-staging
            
            # Check if we have a previous version to rollback to
            if [ -f VERSION.previous ]; then
              PREVIOUS_VERSION=$(cat VERSION.previous)
              echo "Rolling back to version: $PREVIOUS_VERSION"
              
              # Restore previous version
              mv VERSION.previous VERSION
              export VERSION=$PREVIOUS_VERSION
              
              # Use the previous image
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-previous ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging
              
              # Stop current container
              docker-compose -f docker-compose.staging.yml down
              
              # Start with previous version (disable TEST_MODE for normal operations)
              TEST_MODE=disabled docker-compose -f docker-compose.staging.yml up -d
              
              # Wait for health check
              echo "Waiting for rollback container to be healthy..."
              for i in {1..30}; do
                  if docker-compose -f docker-compose.staging.yml exec -T devpad-staging curl -f http://localhost:17365/health 2>/dev/null; then
                      echo "✅ Rollback health check passed!"
                      break
                  elif [ $i -eq 30 ]; then
                      echo "❌ Rollback health check failed!"
                      docker-compose -f docker-compose.staging.yml logs --tail 50
                      exit 1
                  else
                      echo "Attempt $i/30: Waiting for rollback to be ready..."
                      sleep 2
                  fi
              done
              
              echo "✅ Rollback completed successfully!"
            else
              echo "❌ No previous version found for rollback!"
              exit 1
            fi
            
      - name: Notify about rollback
        if: always()
        run: |
          echo "## ⚠️ Staging Deployment Rolled Back" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Failed Version:** \`${{ needs.calculate-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** E2E tests failed" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** Rolled back to previous working version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the test results and fix the issues before deploying again." >> $GITHUB_STEP_SUMMARY
          
  disable-test-mode:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: success()
    environment:
      name: staging
    steps:
      - name: Disable TEST_MODE after successful E2E tests
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_STAGING }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/deploy/devpad-staging
            
            # Restart container with TEST_MODE disabled
            TEST_MODE=disabled docker-compose -f docker-compose.staging.yml up -d
            
            echo "✅ TEST_MODE disabled for normal operations"

  create-deployment-summary:
    runs-on: ubuntu-latest
    needs: [calculate-version, e2e-tests, disable-test-mode]
    if: success()
    steps:
      - name: Create successful deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Successfully deployed and tested" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.calculate-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://staging.devpad.tools" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Health checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smoke tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ E2E tests passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit Info" >> $GITHUB_STEP_SUMMARY
          echo "**SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Message:** ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
