name: Publish Packages

on:
  push:
    branches: [main]
    paths:
      - 'packages/api/**'
      - 'packages/cli/**'
      - 'packages/mcp/**'
      - 'packages/schema/**'
      - '.github/VERSION'
  workflow_dispatch:
    inputs:
      packages:
        description: 'Packages to publish (comma-separated: api,cli,mcp or "all")'
        required: false
        default: 'all'
      version_bump:
        description: 'Version bump type'
        type: choice
        required: false
        default: 'patch'
        options:
          - patch
          - minor
          - major
          - none
      dry_run:
        description: 'Dry run (no actual publish)'
        type: boolean
        required: false
        default: false

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  detect-changes:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      changed_packages: ${{ steps.detect.outputs.packages }}
      should_publish: ${{ steps.detect.outputs.should_publish }}
      current_version: ${{ steps.version.outputs.current }}
      new_version: ${{ steps.version.outputs.new }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get current version
        id: version
        run: |
          CURRENT_VERSION=$(cat .github/VERSION)
          echo "current=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          
          # Calculate new version based on bump type
          if [[ "${{ github.event.inputs.version_bump }}" == "none" ]]; then
            NEW_VERSION=${CURRENT_VERSION}
          elif [[ -n "${{ github.event.inputs.version_bump }}" ]]; then
            # Manual trigger with version bump
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
            IFS='.' read -r major minor patch <<< "${CURRENT_VERSION}"
            
            case $BUMP_TYPE in
              major)
                NEW_VERSION="$((major + 1)).0.0"
                ;;
              minor)
                NEW_VERSION="${major}.$((minor + 1)).0"
                ;;
              patch)
                NEW_VERSION="${major}.${minor}.$((patch + 1))"
                ;;
            esac
          else
            # Auto bump patch for push events
            IFS='.' read -r major minor patch <<< "${CURRENT_VERSION}"
            NEW_VERSION="${major}.${minor}.$((patch + 1))"
          fi
          
          echo "new=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "📦 Version: ${CURRENT_VERSION} → ${NEW_VERSION}"
          
      - name: Detect changed packages
        id: detect
        run: |
          # For manual trigger, use input packages
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PACKAGES="${{ github.event.inputs.packages }}"
            if [[ "$PACKAGES" == "all" ]]; then
              PACKAGES="api,cli,mcp"
            fi
            echo "packages=${PACKAGES}" >> $GITHUB_OUTPUT
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "📝 Manual trigger for packages: ${PACKAGES}"
            exit 0
          fi
          
          # For push events, detect changes
          echo "🔍 Detecting changed packages..."
          
          # Get the last published version tag
          LAST_TAG=$(git tag -l "v*" --sort=-version:refname | head -1)
          if [[ -z "$LAST_TAG" ]]; then
            LAST_TAG="HEAD~1"
            echo "No previous tags found, comparing with HEAD~1"
          else
            echo "Comparing with last tag: $LAST_TAG"
          fi
          
          # Check which packages have changes
          CHANGED_PACKAGES=""
          
          # Check each package for changes
          for package in api cli mcp; do
            if git diff $LAST_TAG..HEAD --quiet -- "packages/$package/"; then
              echo "  ✅ No changes in @devpad/$package"
            else
              echo "  📦 Changes detected in @devpad/$package"
              if [[ -n "$CHANGED_PACKAGES" ]]; then
                CHANGED_PACKAGES="${CHANGED_PACKAGES},"
              fi
              CHANGED_PACKAGES="${CHANGED_PACKAGES}${package}"
            fi
          done
          
          # Check if schema changed (affects all packages)
          if ! git diff $LAST_TAG..HEAD --quiet -- "packages/schema/"; then
            echo "  📦 Schema changes detected - will publish all packages"
            CHANGED_PACKAGES="api,cli,mcp"
          fi
          
          if [[ -z "$CHANGED_PACKAGES" ]]; then
            echo "No packages have changed"
            echo "packages=" >> $GITHUB_OUTPUT
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Changed packages: $CHANGED_PACKAGES"
            echo "packages=${CHANGED_PACKAGES}" >> $GITHUB_OUTPUT
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

  prepare-packages:
    name: Prepare Packages for Publishing
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should_publish == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Update versions
        run: |
          node scripts/sync-versions.js --version ${{ needs.detect-changes.outputs.new_version }}
          
      - name: Build packages
        run: |
          # Build all packages in dependency order
          echo "Building packages in dependency order..."
          cd packages/schema && bun run build
          cd ../core && bun run build
          cd ../api && bun run build
          cd ../cli && bun run build
          cd ../server && bun run build
          cd ../mcp && bun run build
          cd ../app && bun run build
          cd ../..
          
      - name: Run tests
        run: |
          # Run tests for changed packages
          IFS=',' read -ra PACKAGES <<< "${{ needs.detect-changes.outputs.changed_packages }}"
          for package in "${PACKAGES[@]}"; do
            echo "Testing @devpad/$package..."
            cd packages/$package
            bun test || true  # Continue even if tests fail for now
            cd ../..
          done
          
      - name: Prepare for publishing
        run: |
          # Replace workspace: protocol with actual versions for publishing
          IFS=',' read -ra PACKAGES <<< "${{ needs.detect-changes.outputs.changed_packages }}"
          for package in "${PACKAGES[@]}"; do
            echo "Preparing @devpad/$package for publishing..."
            cd packages/$package
            
            # Create a temporary package.json for publishing
            cp package.json package.json.orig
            
            # Replace workspace:* with actual version for dependencies
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
              const version = '${{ needs.detect-changes.outputs.new_version }}';
              
              // Update workspace dependencies
              for (const depType of ['dependencies', 'devDependencies', 'peerDependencies']) {
                if (pkg[depType]) {
                  for (const dep in pkg[depType]) {
                    if (pkg[depType][dep] === 'workspace:*') {
                      // Check if this is a publishable package
                      if (['@devpad/api', '@devpad/cli', '@devpad/mcp'].includes(dep)) {
                        pkg[depType][dep] = '^' + version;
                      } else {
                        // For non-publishable packages, we need to handle differently
                        // For now, keep them as workspace dependencies
                        console.log('Warning: Non-publishable dependency', dep);
                      }
                    }
                  }
                }
              }
              
              fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
            "
            
            cd ../..
          done
          
      - name: Upload prepared packages
        uses: actions/upload-artifact@v4
        with:
          name: prepared-packages
          path: packages/*/package.json

  publish-api:
    name: Publish @devpad/api
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-packages]
    if: contains(needs.detect-changes.outputs.changed_packages, 'api')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download prepared packages
        uses: actions/download-artifact@v4
        with:
          name: prepared-packages
          path: packages/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install and build
        run: |
          bun install --frozen-lockfile
          # Build dependencies first
          cd packages/schema && bun run build
          cd ../core && bun run build
          cd ../api && bun run build
          
      - name: Publish to npm
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd packages/api
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Dry run
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd packages/api
          npm publish --dry-run --access public

  publish-cli:
    name: Publish @devpad/cli
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-packages, publish-api]
    if: contains(needs.detect-changes.outputs.changed_packages, 'cli')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download prepared packages
        uses: actions/download-artifact@v4
        with:
          name: prepared-packages
          path: packages/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install and build
        run: |
          bun install --frozen-lockfile
          # Build dependencies first
          cd packages/schema && bun run build
          cd ../core && bun run build
          cd ../api && bun run build
          cd ../cli && bun run build
          
      - name: Publish to npm
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd packages/cli
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Dry run
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd packages/cli
          npm publish --dry-run --access public

  publish-mcp:
    name: Publish @devpad/mcp
    runs-on: ubuntu-latest
    needs: [detect-changes, prepare-packages, publish-api]
    if: contains(needs.detect-changes.outputs.changed_packages, 'mcp')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download prepared packages
        uses: actions/download-artifact@v4
        with:
          name: prepared-packages
          path: packages/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install and build
        run: |
          bun install --frozen-lockfile
          # Build dependencies first
          cd packages/schema && bun run build
          cd ../core && bun run build
          cd ../api && bun run build
          cd ../mcp && bun run build
          
      - name: Publish to npm
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd packages/mcp
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Dry run
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd packages/mcp
          npm publish --dry-run --access public

  finalize:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [detect-changes, publish-api, publish-cli, publish-mcp]
    if: always() && needs.detect-changes.outputs.should_publish == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update version and commit
        if: github.event.inputs.dry_run != 'true'
        run: |
          VERSION="${{ needs.detect-changes.outputs.new_version }}"
          echo "$VERSION" > .github/VERSION
          
          # Update VERSION_RELEASE if needed
          IFS='.' read -r major minor patch <<< "$VERSION"
          CURRENT_MAJOR=$(cat .github/VERSION_MAJOR)
          if [[ "$major" != "$CURRENT_MAJOR" ]]; then
            echo "$major" > .github/VERSION_MAJOR
            echo "0" > .github/VERSION_RELEASE
          fi
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .github/VERSION .github/VERSION_MAJOR .github/VERSION_RELEASE
          git diff --staged --quiet || git commit -m "chore: bump packages to v${VERSION} [skip ci]"
          git push || echo "No changes to push"
          
      - name: Create git tags
        if: github.event.inputs.dry_run != 'true'
        run: |
          VERSION="${{ needs.detect-changes.outputs.new_version }}"
          PACKAGES="${{ needs.detect-changes.outputs.changed_packages }}"
          
          # Create main version tag
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          
          # Create package-specific tags
          IFS=',' read -ra PKG_ARRAY <<< "$PACKAGES"
          for package in "${PKG_ARRAY[@]}"; do
            git tag -a "@devpad/${package}@${VERSION}" -m "Release @devpad/${package}@${VERSION}"
          done
          
          # Push all tags
          git push origin --tags
          
      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.detect-changes.outputs.new_version }}';
            const packages = '${{ needs.detect-changes.outputs.changed_packages }}'.split(',');
            
            const packageList = packages.map(p => `- @devpad/${p}`).join('\n');
            const npmLinks = packages.map(p => 
              `- [@devpad/${p}](https://www.npmjs.com/package/@devpad/${p}/v/${version})`
            ).join('\n');
            
            const body = `## 📦 Package Release v${version}
            
            ### Published Packages
            ${packageList}
            
            ### NPM Links
            ${npmLinks}
            
            ### Installation
            \`\`\`bash
            # Install specific packages
            ${packages.map(p => `npm install @devpad/${p}@${version}`).join('\n')}
            \`\`\`
            
            ### Changelog
            - Updated packages to version ${version}
            - See individual package changelogs for details
            `;
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${version}`,
              name: `devpad Packages v${version}`,
              body: body,
              draft: false,
              prerelease: false
            });
            
      - name: Summary
        run: |
          echo "## 📦 Package Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "**🔍 DRY RUN MODE - No packages were actually published**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Version:** ${{ needs.detect-changes.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Packages:** ${{ needs.detect-changes.outputs.changed_packages }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -ra PACKAGES <<< "${{ needs.detect-changes.outputs.changed_packages }}"
          for package in "${PACKAGES[@]}"; do
            echo "- ✅ @devpad/$package@${{ needs.detect-changes.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          done