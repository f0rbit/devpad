name: Docker Build Test

on:
  pull_request:
    paths:
      - 'packages/**'
      - 'deployment/**'
      - 'package.json'
      - 'bun.lockb'
      - '.github/workflows/docker-test.yml'
      - '.github/workflows/deploy-*.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start test container with docker-compose
        id: start
        run: |
           # Use docker-compose-local for testing
           docker compose -f deployment/docker-compose.test.yml up -d --build
           echo "Container started with docker-compose, waiting for health check..."
      
      - name: Wait for container health
        id: health
        timeout-minutes: 2
        run: |
           ATTEMPTS=0
           MAX_ATTEMPTS=24

           while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
             ATTEMPTS=$((ATTEMPTS + 1))
             echo "Health check attempt $ATTEMPTS/$MAX_ATTEMPTS..."

             # Check container health status using docker-compose
             HEALTH_STATUS=$(docker compose -f deployment/docker-compose.test.yml ps devpad --format json | jq -r '.[0].State' 2>/dev/null || echo "not-running")

             if [ "$HEALTH_STATUS" = "running" ]; then
               # Additional health check via HTTP
               if curl -f http://localhost:3000/health >/dev/null 2>&1; then
                 echo "✅ Container is healthy!"
                 exit 0
               fi
             fi

             sleep 5
           done

           echo "❌ Container failed to become healthy after $MAX_ATTEMPTS attempts"
           echo "Container status:"
           docker compose -f deployment/docker-compose.test.yml ps
           echo "Container logs:"
           docker compose -f deployment/docker-compose.test.yml logs --tail 50
           exit 1
      
      - name: Test API endpoints
        run: |
          echo "Testing health endpoint..."
          curl -f http://localhost:3000/health || exit 1
          
          echo "Testing main page..."
          curl -f http://localhost:3000/api/v0 -o /dev/null || exit 1
          
          echo "✅ All endpoints responding correctly!"
      
      - name: Setup Bun for E2E tests
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(bunx playwright --version | awk '{print $2}')" >> $GITHUB_OUTPUT
      
      - name: Cache Playwright browsers and dependencies marker
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
            ~/playwright-deps-installed
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-deps-v1
          restore-keys: |
            playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}-
            playwright-${{ runner.os }}-
      
      - name: Install Playwright browsers and dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          bunx playwright install chromium --with-deps
          touch ~/playwright-deps-installed
      
      - name: Run E2E tests
        run: TEST_ENV=docker bun run e2e
        env:
          CI: true
      
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: .playwright/
          retention-days: 7
      
      - name: Display container logs on failure
        if: failure()
        run: |
           echo "=== Container Logs ==="
           docker compose -f deployment/docker-compose.test.yml logs --tail 50 || echo "Failed to get logs"
           echo "=== Container Status ==="
           docker compose -f deployment/docker-compose.test.yml ps || echo "Failed to get status"

      - name: Cleanup
        if: always()
        run: |
           docker compose -f deployment/docker-compose.test.yml down -v || true
      
      - name: Push image to registry (cache only)
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:pr-${{ github.event.pull_request.number }}-cache
          cache-from: type=gha,scope=pr-${{ github.event.pull_request.number }}
          cache-to: type=gha,mode=max,scope=staging
          platforms: linux/amd64
